// //write a program to reverse a string without chanf=ging special characters 
// // #include <algorithm>
// // #include <iostream>
// // #include <string>
// // using namespace std;

// // std::string reverse_string_preserving_special_characters(const std::string& s) {
// //     std::string reversed_chars;
// //     std::string temp;
// //     for (char c : s) {
// //         if (std::isspace(c) || std::isalpha(c)) {
// //             temp.push_back(c);
// //         } else {
// //             reversed_chars.push_back(c);
// //         }
// //     }
// //     std::reverse(temp.begin(), temp.end());
// //     reversed_chars += temp;
// //     return reversed_chars;
// // }
// // int main(){
// // std::string input_string;
// // cin>>input_string;
// // std::string output_string = reverse_string_preserving_special_characters(input_string);
// // cout<<"output_string "<< std::endl;
// // cout<<reverse_string_preserving_special_characters(input_string);

// // }
// #include <iostream>
// #include <map>
// #include<string>
// using namespace std;
// map<char,int>create_dictionary(){
//     map<char,int>dict;
//     dict['0'] = 1;
//     dict['1'] = 0;
//     dict['2'] = 0;
//     dict['3'] = 0;
//     dict['4'] = 0;
//     dict['5'] = 0;
//     dict['6'] = 1;
//     dict['7'] = 1;
//     dict['8'] = 2;
//     dict['9'] = 1;
//     return dict;

// }
// int calculate_output(string& s,map<char,int>&dict){
//     int total=0;
//     for(char c : s){
//         total += dict.at(c);
//     }
//     return total;
// }
// int main(){
//     map<char,int>dict = create_dictionary();
//     string input;
//     cin>>input;
//     cout<<"output:"<<calculate_output(input,dict)<<endl;
//     return 0;
    


// }
//write a program to reverse a string without chanfging special characters 
// #include<iostream>
// using namespace std;
// string reverse(string s){
//     int i=0;
//     int j=s.length()-1;
//     while(i<j){
//         if(!isalpha(s[i])){
//             i++;
//         }
//         else if(!isalpha(s[j])){
//             j--;
//         }
//         else{
//             swap(s[i],s[j]);
//             i++;
//             j--;
//         }
//     }
//     return s;

// }
    
/*You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9*/

#include<iostream>
#include<vector>
using namespace std;

int evalRPN(vector<string>& tokens){

     int n= tokens.size();
    vector<int>stack;
    for(int i=0;i<n;i++){
        if(tokens[i]=="+" || tokens[i]=="-" || tokens[i]=="*" || tokens[i]=="/"){
            int a=stack.back();
            stack.pop_back();
            int b=stack.back();
            stack.pop_back();
            if(tokens[i]=="+"){
                stack.push_back(a+b);
            }
            else if(tokens[i]=="-"){
                stack.push_back(b-a);
            }
            else if(tokens[i]=="*"){
                stack.push_back(a*b);
            }
            else if(tokens[i]=="/"){
                stack.push_back(b/a);
            }
        }
        else{
            stack.push_back(stoi(tokens[i]));
        }
    }

}
int main(){
    int n;
    cin>>n;
    vector<string>tokens;
    for(int i=0;i<n;i++){
        string s;
        cin>>s;
        tokens.push_back(s);
    }
    cout<<evalRPN(tokens)<<endl;
    return 0;
    

}


